load("@npm//@bazel/typescript:index.bzl", "ts_config", "ts_library")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")

package(default_visibility = ["//:__subpackages__"])

ts_library(
    name = "compile",
    srcs = glob(
        include = ["**/*.ts"],
        exclude = [
            "**/*.spec.ts",
            "src/test-setup.ts",
        ],
    ),
    tsconfig = "tsconfig_lib",
    deps = [
        "//environments",
        "//libs/shared/data-access-strapi:compile",
        "//libs/shared/design-system/interfaces:design-system-interfaces_compile",
        "//libs/shared/node",
        "@npm//@types/cheerio",
        "@npm//@types/markdown-it",
        "@npm//@types/node",
        "@npm//@types/yargs",
        "@npm//axios",
        "@npm//chalk",
        "@npm//cheerio",
        "@npm//glob",
        "@npm//markdown-it",
        "@npm//markdown-it-deflist",
        "@npm//tslib",
        "@npm//typescript",
        "@npm//yargs",
    ],
)

nodejs_binary(
    name = "barista_tools_binary",
    data = [":compile"],
    entry_point = "src/main.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

# This rule generates a warning from Bazel since the output is a directory instead of an
# explicit list of files. This is unavoidable due to the dynamic nature of the Barista builder.
genrule(
    name = "barista",
    outs = ["barista-build"],
    cmd = "$(execpath :barista_tools_binary) --dist-root=$(OUTS) --next=false",
    tools = [":barista_tools_binary"],
)

ts_config(
    name = "tsconfig_lib",
    src = "tsconfig.lib.json",
    deps = [
        "//:tsconfig.base.json",
    ],
)
