{
  "extends": [
    "tslint:all",
    "./codelyzer.json"
  ],
  "rulesDirectory": [
    "./tools/tslint-rules/",
    "node_modules/codelyzer"
  ],
  "rules": {
    // Bans jasmine helper functions that will prevent the CI from properly running tests.
    "ban": [
      true,
      ["fit"],
      ["fdescribe"],
      ["xit"],
      ["xdescribe"],
      {"name": "Object.assign", "message": "Use the spread operator instead."}
    ],
    "class-name": true,
    "comment-format": [
      true,
      "check-space"
    ],
    "completed-docs": false,
    "curly": true,
    "eofline": true,
    // Disallows importing the whole RxJS library. Submodules can be still imported.
    "import-blacklist": [true, "rxjs", "rxjs/operators"],
    "interface-name": [
      true,
      "never-prefix"
    ],
    "indent": [
      true,
      "spaces"
    ],
    "linebreak-style": [false],
    // this needs to be disabled since having multiple components/directives
    // in one file is sometimes suitable due to the size and sharing of small pieces of code
    "max-classes-per-file": false,
    "max-line-length": [true, 132],
    // no implicit dependencies need to be false since we have cross references inside the modules which are not listed as a dependency
    "member-access": [true, "no-public"],
    "member-ordering": false,
    // Disabled as it would also force new lines for only one operator or function call
    "newline-per-chained-call": false,
    // Changing it as it does also enforce this rule for very simple code
    "newline-before-return": false,
    "no-implicit-dependencies": [
      false
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-duplicate-variable": true,
    // it is in some places essential for change detection
    "no-empty": false,
    "no-eval": true,
    "no-debugger": true,
    "no-internal-module": true,
    // Namespaces are not allowed, because of Closure compiler.
    "no-namespace": true,
    // This is essential for specific checks where typescript has a hard time resolving the type of it.
    // This would the result in using checks (like instanceof) in some places that are slower.
    "no-non-null-assertion": false,
    "no-null-keyword": false,
    "no-parameter-properties": false,
    "no-shadowed-variable": true,
    "no-submodule-imports": false,
    "no-trailing-whitespace": true,
    "no-var-keyword": true,
    "no-unsafe-any": false,
    "no-unused-expression": true,
    "no-unused-variable": true,
    "object-literal-sort-keys": false,
    // Disabled otherwise normal functions like class mixins are not possible
    "only-arrow-functions": false,
    "one-line": [
      true,
      "check-catch",
      "check-else",
      "check-open-brace",
      "check-whitespace"
    ],
    // ordering is better to be logically grouped than alphabetical
    "ordered-imports": false,
    "prefer-function-over-method": false,
    // Turning it off as it would enforce readonly on private properties set via DI in the constructor
    // It also has an issue within mixin classes.
    "prefer-readonly": false,
    "quotemark": [
      true,
      "single",
      "avoid-escape"
    ],
    "semicolon": true,
    // Turning it of so it does not throw on default value assertion like this: variant = value || defaultVariant
    // There is also an open issue on this one: https://github.com/palantir/tslint/issues/3279
    "strict-boolean-expressions": false,
    "typedef": [
      true,
      "call-signature",
      "parameter",
      // Removed as this could be result in a lot of pollution when piping RxJS operators and array functions
      // "arrow-parameter",
      "property-declaration"
    ],
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "trailing-comma": [
      true,
      {
        "multiline": {
          "objects": "always",
          "arrays": "always",
          // Disabled as this would lead to an undefined last arguments in every function with multiline arguments
          "functions": "never",
          "typeLiterals": "ignore"
        },
        "esSpecCompliant": true
      }
    ],
    "variable-name": [
      true,
      "ban-keywords",
      "check-format",
      "allow-leading-underscore"
    ],
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type",
      "check-preblock"
    ],

    // Custom Rules
    "ts-loader": true,
    "no-rxjs-patch-imports": [
      true,
      "src/+(lib)/**/*.ts"
    ]
  }
}
