import { basename, dirname, extname, join } from 'path';
import * as stream from 'stream';

import * as matter from 'gray-matter';
import { dest, src, task } from 'gulp';
import * as markdownIt from 'markdown-it';
import * as through from 'through2';

const md = new markdownIt({
  html: true,
  typographer: false,
});

const ROOT_DIR = join(__dirname, '../../../');
const JSON_DEST_DIR = join(__dirname, '../../../', 'src', 'barista', 'data');

interface BaPageContent {
  title: string;
  id: string;
  layout: string;
  contentMd: string;
  contentHtml: string;
  description?: string;
  properties?: string[];
  tags?: string[];
  // TODO: set correct navgroup, see barista-content-generator, do we still need this?
  nav_group?: string;
  // tbc
}

/**
 * Get all Markdown (.md) files from the following directories
 * of the Angular Components repository.
 */
const globArray = ['*.md', 'documentation/*.md', 'src/lib/**/*.md'];

/** Set options for gulp.src */
const globOptions = {
  cwd: ROOT_DIR,
  base: ROOT_DIR,
};

/** Slugify helper function. */
function slugify(str: string): string {
  const escapedTitle = str
    .toLowerCase()
    .trim()
    .replace(/ /g, '-')
    .replace(/[^\w-]/g, '')
    .replace(/_/g, '-');
  return escapedTitle;
}

/**
 * Checks if file is a documentation file,
 * based on the file's path.
 */
function isDocumentationFile(fileDirname: string) {
  return (
    fileDirname.endsWith('/angular-components') ||
    fileDirname.endsWith('/angular-components/documentation')
  );
}

/**
 * Generate a new file basename (instead of README.md).
 */
function getFileBaseName(fileDirname: string, title: string) {
  if (!isDocumentationFile(fileDirname)) {
    const pathParts = fileDirname.split('/');
    const fileDir = pathParts[pathParts.length - 1];
    if (fileDir.length) {
      return slugify(fileDir);
    }
  }

  return slugify(title.toLowerCase());
}

/**
 * Create a file id based on the filename.
 */
function generateFileId(file: BaPageContent, fileDirname: string) {
  const slugifiedFileName = slugify(file.title);
  if (isDocumentationFile(fileDirname)) {
    return `angular-components-${slugifiedFileName}`;
  }
  return slugifiedFileName;
}

/**
 * Add given properties to existing properties.
 */
function addProperties(file: BaPageContent, properties: string[]): string[] {
  const fileProps = file.properties || [];
  const propSet = new Set([...properties, ...fileProps]);
  return Array.from(propSet);
}

/**
 * Add given tags to existing tags.
 */
function addTags(file: BaPageContent, tags: string[]): string[] {
  const fileTags = file.tags || [];
  const tagSet = new Set([...tags, ...fileTags]);
  return Array.from(tagSet);
}

/**
 * Extend the given front matter with data that is needed
 * for the final output and can be generated based on the
 * file's content and source.
 */
function extendFrontMatter(
  file: BaPageContent,
  filepath: string,
): BaPageContent {
  const fileDirname = dirname(filepath);
  // Set documentation property if it's a documentation file.
  if (isDocumentationFile(fileDirname)) {
    file.properties = addProperties(file, ['documentation']);
  }

  // Set page layout to "component" for all pages coming from
  // the angular-components repo.
  file.layout = 'component';

  // Add additional tags.
  file.tags = addTags(file, ['component', 'angular']);

  // Set a post id if not given.
  file.id = file.id || generateFileId(file, fileDirname);

  return file;
}

/**
 * Generate final file path based on the source path, title and
 * baristafilename if given in front matter.
 */
function adjustFilePath(
  filePath: string,
  title: string,
  baristafilename: string | undefined,
) {
  const fileDirname = dirname(filePath);
  const fileExtname = extname(filePath);
  const fileBasename = basename(filePath, fileExtname);
  let finalBasename = fileBasename;

  finalBasename = baristafilename
    ? basename(baristafilename, '.md')
    : getFileBaseName(fileDirname, title);

  return `components/${finalBasename}.json`;
}

/**
 * Generate front matter data for changelog page,
 * as this page is generated automatically.
 */
function generateChangelogFrontMatter() {
  return {
    title: 'Changelog',
    description:
      'The changelog lists all bug fixes and features of all Angular components versions since version 1.0.0.',
    tags: ['changes', 'release', 'bug fixes', 'features'],
    toc: false,
  };
}

/**
 * Modify markdown files and transform them to JSON files.
 * The resulting files contain the source file's front matter and the
 * content transformed from Markdown to HTML.
 */
function modifyFiles(): stream.Transform {
  return through.obj((file, _, callback) => {
    if (file.isNull()) {
      callback(null);
      return;
    }

    const contentStr = file.contents.toString('utf8');
    const fm = matter(contentStr);

    // Special handling for changelog as this file does not
    // come with a front matter, because it's autogenerated.
    if (file.path.endsWith('/angular-components/CHANGELOG.md')) {
      fm.data = generateChangelogFrontMatter();
    }

    // Skip draft pages and pages without a title, don't publish them.
    if (fm.data.draft === true || fm.data.title === undefined) {
      callback(null);
      return;
    }

    // Generate file object.
    let fileObject = {
      ...fm.data,
      ...{
        contentMd: fm.content,
        contentHtml: md.render(fm.content),
      },
    } as BaPageContent;

    fileObject = extendFrontMatter(fileObject, file.path);

    file.contents = Buffer.from(JSON.stringify(fileObject));
    file.path = adjustFilePath(
      file.path,
      fm.data.title,
      fm.data.baristafilename,
    );

    callback(null, file);
  });
}

task('barista:generate-content', () =>
  src(globArray, globOptions)
    .pipe(modifyFiles())
    .pipe(dest(JSON_DEST_DIR)),
);
