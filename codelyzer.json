{
  "rules": {
    "angular-whitespace": [true, "check-semicolon"],
    "banana-in-box": true,
    "templates-no-negated-async": true,
    // Changed because in some places we need a element selector for directives
    "directive-selector": [false, "", ["dt", "docs"]],
    // Changed because selectors like `button[dt-button], button[dt-icon-button]` would not be possible
    "component-selector": [true, "", ["dt", "docs"], "kebab-case"],
    // We need to change this to enable the usage of class mixins.
    // Most mixins will have the input in the subclass so we need
    // to provide this information to the component.
    "use-input-property-decorator": false,
    "use-output-property-decorator": true,
    // Prefer using the host object in the directive configuration instead of @HostBinding and @HostListener.
    // We do this because TypeScript preserves the type information of methods with decorators, and when one
    // of the arguments for the method is a native Event type, this preserved type information can lead to
    // runtime errors in non-browser environments (e.g., server-side pre-rendering).
    // It also enables us to set attributes and class on the host object without bindings.
    "use-host-property-decorator": false,
    "use-view-encapsulation": true,
    "no-output-named-after-standard-event": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "no-output-on-prefix": true,
    "no-forward-ref": true,
    "use-life-cycle-interface": true,
    "contextual-life-cycle": true,
    "use-pipe-transform-interface": true,
    "pipe-impure": true,
    "template-cyclomatic-complexity": [true, 5],
    "template-conditional-complexity": [true, 4]
  }
}
