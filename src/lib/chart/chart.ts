import {
  Component,
  ViewChild,
  ElementRef,
  AfterViewInit,
  Input,
  ChangeDetectionStrategy,
  OnDestroy,
  EventEmitter,
  Output,
  Optional,
  SkipSelf,
  SimpleChanges,
  OnChanges,
  ViewEncapsulation,
  ChangeDetectorRef,
  NgZone,
  QueryList,
  ContentChildren,
  forwardRef,
} from '@angular/core';
import { DtViewportResizer } from '@dynatrace/angular-components/core';
import { DtTheme } from '@dynatrace/angular-components/theming';
// tslint:disable-next-line:no-duplicate-imports
import * as Highcharts from 'highcharts';
// tslint:disable-next-line:no-duplicate-imports
import { AxisOptions, chart, ChartObject, IndividualSeriesOptions, Options, setOptions, addEvent as addHighchartsEvent } from 'highcharts';
import { merge as lodashMerge } from 'lodash';
import { Observable, Subject, Subscription, defer, merge } from 'rxjs';
import { delay, takeUntil, take, switchMap } from 'rxjs/operators';
import { ChartColorizer } from './chart-colorizer';
import { DEFAULT_CHART_AXIS_STYLES, DEFAULT_CHART_OPTIONS, DEFAULT_GLOBAL_OPTIONS } from './chart-options';
import { defaultTooltipFormatter } from './chart-tooltip';
import { configureLegendSymbols } from './highcharts-legend-overrides';
import { DtChartHeatfield, DtChartHeatfieldActiveChange } from './heatfield/chart-heatfield';
import { SelectionModel } from '@angular/cdk/collections';

export type DtChartOptions = Options & { series?: undefined };
export type DtChartSeries = IndividualSeriesOptions;
interface DtChartTooltip { (): string | boolean; iswrapped: boolean; }

// tslint:disable-next-line:no-any
declare const window: any;
// tslint:disable-next-line:no-any
declare var require: any;
/* DANGER ZONE - this function needs to be self executing so uglify does not drop the call */
// tslint:disable-next-line:no-var-requires no-require-imports
window.highchartsMore = require('highcharts/highcharts-more')(Highcharts);
// Override Highcharts prototypes
// added to the window so uglify does not drop this from the bundle
window.configureLegendSymbols = configureLegendSymbols;
// Highcharts global options, set outside component so its not set everytime a chart is created
setOptions(DEFAULT_GLOBAL_OPTIONS);

@Component({
  moduleId: module.id,
  selector: 'dt-chart',
  styleUrls: ['./chart.scss'],
  templateUrl: './chart.html',
  exportAs: 'dtChart',
  // disabled ViewEncapsulation because some html is generated by highcharts
  // so it does not get the classes from angular
  // tslint:disable-next-line: use-view-encapsulation
  encapsulation: ViewEncapsulation.None,
  preserveWhitespaces: false,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class DtChart implements AfterViewInit, OnDestroy, OnChanges {
  @ViewChild('container') container: ElementRef;

  @ContentChildren(forwardRef(() => DtChartHeatfield)) _heatfields: QueryList<DtChartHeatfield>;

  _loading = false;
  private _series: Observable<DtChartSeries[]> | DtChartSeries[] | undefined;
  private _currentSeries: IndividualSeriesOptions[] | undefined;
  private _options: DtChartOptions;
  private _dataSub: Subscription | null = null;
  private _isTooltipWrapped = false;
  private _highchartsOptions: Options;
  private _handleColors = true;
  /**
   * This flag is necessary due to a bug in highcharts
   * where the series need to be reset to have the
   * correct xAxis categories displayed when the
   * chart type is updated (f.i. xAxis.type = 'datetime' => 'category')
   */
  private _xAxisHasChanged: boolean;
  private readonly _destroy = new Subject<void>();

  readonly _afterRender = new Subject<void>();

  /**
   * The highcharts chart object
   * @internal
   */
  _chartObject: ChartObject;

  @Input()
  get options(): DtChartOptions {
    return this._options;
  }
  set options(options: DtChartOptions) {
    // Mark for reset Series before updating chart.
    this._xAxisHasChanged = (options.xAxis !== this.highchartsOptions.xAxis);
    this._options = options;
    this._isTooltipWrapped = false;
    this._handleColors = options.colors === undefined;
    this._mergeOptions(options);
  }

  @Input()
  get series(): Observable<DtChartSeries[]> | DtChartSeries[] | undefined {
    return this._series;
  }
  set series(series: Observable<DtChartSeries[]> | DtChartSeries[] | undefined) {
    if (this._dataSub) {
      this._dataSub.unsubscribe();
      this._dataSub = null;
    }
    if (series instanceof Observable) {
      this._dataSub = series.subscribe((s: DtChartSeries[]) => {
        this._mergeSeries(s);
        this._update();
        this._changeDetectorRef.markForCheck();
      });
    } else {
      this._mergeSeries(series);
    }
    this._series = series;
    this._setLoading();
  }

  @Output() readonly updated: EventEmitter<void> = new EventEmitter();

  private readonly _heatfieldActiveChanges: Observable<DtChartHeatfieldActiveChange> = defer(() => {
    if (this._heatfields) {
      return merge(...this._heatfields.map((heatfield) => heatfield.activeChange));
    }

    return this._ngZone.onStable
      .asObservable()
      .pipe(take(1), switchMap(() => this._heatfieldActiveChanges));
  });

  /** Deals with the selection logic. */
  private _heatfieldSelectionModel: SelectionModel<DtChartHeatfield>;

  constructor(
    @Optional() private _viewportResizer: DtViewportResizer,
    @Optional() @SkipSelf() private _theme: DtTheme,
    private _changeDetectorRef: ChangeDetectorRef,
    private _ngZone: NgZone
  ) {
    if (this._viewportResizer) {
      this._viewportResizer.change()
        .pipe(takeUntil(this._destroy), delay(0))// delay to postpone the reflow to the next change detection cycle
        .subscribe(() => {
          if (this._chartObject) {
            this._chartObject.reflow();
          }
        });
    }
    if (this._theme) {
      this._theme._stateChanges.pipe(takeUntil(this._destroy)).subscribe(() => {
        if (this._currentSeries) {
          this._mergeSeries(this._currentSeries);
          this._update();
        }
      });
    }
    this._heatfieldActiveChanges.pipe(takeUntil(this._destroy)).subscribe((event) => {
      this._onHeatfieldActivate(event.source);
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes.series || changes.options) {
      this._update();
    }
  }

  ngAfterViewInit(): void {
    this._createChart();
  }

  ngAfterContentInit(): void {
    this._heatfieldSelectionModel = new SelectionModel<DtChartHeatfield>();
    this._heatfieldSelectionModel.changed.pipe(takeUntil(this._destroy)).subscribe((event) => {
      event.added.forEach((heatfield) => { heatfield.active = true; });
      event.removed.forEach((heatfield) => { heatfield.active = false; });
    });
  }

  ngOnDestroy(): void {
    this._destroy.next();
    this._destroy.complete();
    if (this._chartObject) {
      this._chartObject.destroy();
    }
    if (this._dataSub) {
      this._dataSub.unsubscribe();
    }
    this._afterRender.complete();
  }

  /** Invoked when an heatfield is activated. */
  private _onHeatfieldActivate(heatfield: DtChartHeatfield): void {
    const wasActive = this._heatfieldSelectionModel.isSelected(heatfield);

    if (heatfield.active) {
      this._heatfieldSelectionModel.select(heatfield);
    } else {
      this._heatfieldSelectionModel.deselect(heatfield);
    }

    if (wasActive !== this._heatfieldSelectionModel.isSelected(heatfield)) {
      this._changeDetectorRef.markForCheck();
    }
  }

  /** returns an array of ids for the series data */
  get seriesIds(): Array<string | undefined> | undefined {
    if (this._highchartsOptions.series) {

      return this._highchartsOptions.series.map((s: IndividualSeriesOptions) => s.id);
    }

    return undefined;
  }

  /**
   * returns the combined highcharts options for the chart
   * combines series and options passed, merged with the defaultOptions
   */
  get highchartsOptions(): Options {
    if (!this._highchartsOptions) {
      this._highchartsOptions = DEFAULT_CHART_OPTIONS;
    }
    if (this._highchartsOptions.xAxis) {
      this._mergeAxis('xAxis');
    }
    if (this._highchartsOptions.yAxis) {
      this._mergeAxis('yAxis');
    }
    return this._highchartsOptions;
  }

  /* merge options with internal highcharts options and defaultoptions */
  private _mergeOptions(options: DtChartOptions): void {
    const merged = lodashMerge({}, DEFAULT_CHART_OPTIONS, options) as Options;
    merged.series = this.highchartsOptions.series;
    this._wrapTooltip(merged);
    this._highchartsOptions = merged;
  }

  /* merge series with the highcharts options internally */
  private _mergeSeries(series: DtChartSeries[] | undefined): void {
    this._currentSeries = series;
    const options = this.highchartsOptions;
    options.series = series && series.map(((s) => ({...s})));
    if (options.series) {
      this._colorizeChart(options);
    }
  }

  /* merge default axis options to all axis */
  private _mergeAxis(axis: 'xAxis' | 'yAxis' | 'zAxis'): void {
    if (!this._highchartsOptions[axis]) {
      return;
    }
    if (Array.isArray(this._highchartsOptions[axis])) {
      this._highchartsOptions[axis] = this._highchartsOptions[axis]
        .map((a) => lodashMerge({}, DEFAULT_CHART_AXIS_STYLES, a) as AxisOptions[]);
    } else {
      this._highchartsOptions[axis] = lodashMerge({}, DEFAULT_CHART_AXIS_STYLES, this._highchartsOptions[axis]);
    }
  }

  /**
   * Wraps the options.tooltip.formatter function passed into a div.dt-chart-tooltip
   * to enable correct styling for the tooltip
   */
  private _wrapTooltip(highchartsOptions: Options): void {

    if (!this._isTooltipWrapped) {
      let tooltipFormatterFunc = defaultTooltipFormatter;
      if (this.options && this.options.tooltip && this.options.tooltip.formatter) {
        tooltipFormatterFunc = this.options.tooltip.formatter;
      }

      highchartsOptions.tooltip!.formatter = function(): string | boolean {
        const tooltipFormatterFuncBound = tooltipFormatterFunc.bind(this);

        return `<div class="dt-chart-tooltip">${tooltipFormatterFuncBound()}</div>`;
      } as DtChartTooltip;

      this._isTooltipWrapped = true;
    }
  }

  /**
   * Spins up the chart with correct colors applied
   */
  private _createChart(): void {
    this._chartObject = this._ngZone.runOutsideAngular(() => chart(this.container.nativeElement, this.highchartsOptions));
    addHighchartsEvent(this._chartObject, 'redraw', (event) => {
      this._afterRender.next();
    });
    this._setLoading();
    this._afterRender.next();
  }

  /**
   * Update function to apply new data to the chart
   */
  private _update(redraw: boolean = true, oneToOne: boolean = true): void {
    if (this._chartObject) {
      this._setLoading();
      this._ngZone.runOutsideAngular(() => {
        if (this._xAxisHasChanged) {
          this._chartObject.update({ series: [] }, false, oneToOne);
          this._xAxisHasChanged = false;
        }
        this._chartObject.update(this.highchartsOptions, redraw, oneToOne);
      });
      this.updated.emit();
    }
  }

  /** updates the loading status of the component */
  private _setLoading(): void {
    this._loading = !this._highchartsOptions.series;
  }

  private _colorizeChart(options: Options): void {
    if (this._handleColors) {
      let nrOfMetrics;
      if (
        options.chart &&
        options.chart.type === 'pie' &&
        options.series &&
        options.series.length === 1
      ) {
        const pieSeries = options.series[0];
        nrOfMetrics = pieSeries.data && pieSeries.data.length;
      } else {
        nrOfMetrics = options.series && options.series.length;
      }
      ChartColorizer.apply(options, nrOfMetrics, this._theme);
    }
  }
}
