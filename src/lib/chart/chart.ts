import {
  Component,
  ViewChild,
  ElementRef,
  AfterViewInit,
  Input,
  ChangeDetectionStrategy,
  OnDestroy,
  EventEmitter,
  Output,
  Optional,
  SkipSelf,
  SimpleChanges,
  OnChanges,
  ViewEncapsulation,
  ChangeDetectorRef,
  NgZone,
  QueryList,
  ContentChildren,
  forwardRef,
  Inject,
  InjectionToken,
  Self,
  AfterContentInit,
  ContentChild,
} from '@angular/core';
import { SelectionModel } from '@angular/cdk/collections';
import { DtViewportResizer, removeCssClass, addCssClass } from '@dynatrace/angular-components/core';
import { DtTheme } from '@dynatrace/angular-components/theming';

// tslint:disable-next-line:no-duplicate-imports
import * as Highcharts from 'highcharts';
// tslint:disable-next-line:no-duplicate-imports
import {
  chart,
  ChartObject,
  IndividualSeriesOptions,
  Options as HighchartsOptions,
  setOptions,
  addEvent as addHighchartsEvent } from 'highcharts';
import { merge as lodashMerge } from 'lodash';
import { Observable,
  Subject,
  Subscription,
  defer,
  merge,
  BehaviorSubject,
  fromEvent,
  combineLatest,
  from,
  EMPTY,
  ReplaySubject,
  animationFrameScheduler,
} from 'rxjs';
import {
  delay,
  takeUntil,
  take,
  switchMap,
  distinctUntilChanged,
  map,
  filter,
  share,
  pairwise,
  tap,
  mergeMap,
  mapTo,
  withLatestFrom,
  throttleTime,
 } from 'rxjs/operators';

import { DT_CHART_DEFAULT_GLOBAL_OPTIONS } from './chart-options';
import { configureLegendSymbols } from './highcharts/highcharts-legend-overrides';
import { addTooltipEvents, DtHcTooltipEventPayload, findHoveredSeriesIndex } from './highcharts/highcharts-tooltip-extensions';
import { DtChartHeatfield, DtChartHeatfieldActiveChange } from './heatfield/chart-heatfield';
import { createHighchartOptions, applyHighchartsColorOptions } from './highcharts/highcharts-util';
import { DT_CHART_CONFIG, DtChartConfig, DT_CHART_DEFAULT_CONFIG } from './chart-config';
import { DtChartTooltipEvent } from './highcharts/highcharts-tooltip-types';
import { applyHighchartsErrorHandler } from './highcharts/highcharts-errors';

import { DtChartTimestamp } from './timestamp/timestamp';
import { DtChartRange } from './range/range';
import {
  setPosition,
  MousePosition,
  getRelativeMousePosition,
  createRange,
  updateRange,
  captureAndMergeEvents,
  Range,
} from './utils';

const HIGHCHARTS_PLOT_BACKGROUND = '.highcharts-plot-background';
const HIGHCHARTS_X_AXIS_GRID = '.highcharts-grid highcharts-xaxis-grid';
const HIGHCHARTS_Y_AXIS_GRID = '.highcharts-grid highcharts-yaxis-grid';
const HIGHCHARTS_SERIES_GROUP = '.highcharts-series-group';

const NO_POINTER_EVENTS_CLASS = 'dt-no-pointer-events';
const GRAB_CURSOR_CLASS = 'dt-pointer-grabbing';

export type DtChartOptions = HighchartsOptions & { series?: undefined; tooltip?: { shared: boolean }; interpolateGaps?: boolean };
export type DtChartSeries = IndividualSeriesOptions;

// tslint:disable-next-line:no-any
declare const window: any;
// tslint:disable-next-line:no-any
declare var require: any;
/* DANGER ZONE - this function needs to be self executing so uglify does not drop the call */
// tslint:disable-next-line:no-var-requires no-require-imports
window.highchartsMore = require('highcharts/highcharts-more')(Highcharts);
// Override Highcharts prototypes
// added to the window so uglify does not drop this from the bundle
window.configureLegendSymbols = configureLegendSymbols;
// Highcharts global options, set outside component so its not set every time a chart is created
setOptions(DT_CHART_DEFAULT_GLOBAL_OPTIONS);
// added to the window so uglify does not drop this from the bundle
window.highchartsTooltipEventsAdded = addTooltipEvents();

// add global Highcharts error handler for server side logging
applyHighchartsErrorHandler();

/** Injection token used to get the instance of the dt-chart instance  */
export const DT_CHART_RESOLVER = new InjectionToken<() => DtChart>('dt-chart-resolver');
/**
 * @internal
 * Resolver similar to forward ref since we don't have the chart in the constructor necessarily (e.g. micro charts),
 * we might only have it afterViewInit
 */
export type DtChartResolver = () => DtChart;

/**
 * @internal
 * Factory used to get the DtChartResolver
 * this needs to be written as below without lambda expressions due to a compiler bug,
 * see https://github.com/angular/angular/issues/23629 for further information
 */
export function DT_CHART_RESOVER_PROVIDER_FACTORY(c: DtChart): DtChartResolver {
    const resolver = () => c;
    return resolver;
  }

@Component({
  moduleId: module.id,
  selector: 'dt-chart',
  styleUrls: ['./chart.scss'],
  templateUrl: './chart.html',
  exportAs: 'dtChart',
  host: {
    class: 'dt-chart',
  },
  // disabled ViewEncapsulation because some html is generated by highcharts
  // so it does not get the classes from angular
  // tslint:disable-next-line: use-view-encapsulation
  encapsulation: ViewEncapsulation.None,
  preserveWhitespaces: false,
  changeDetection: ChangeDetectionStrategy.OnPush,
  providers: [
    { provide: DT_CHART_RESOLVER, useFactory: DT_CHART_RESOVER_PROVIDER_FACTORY, deps: [[new Self(), DtChart]] },
  ],
})
export class DtChart implements AfterViewInit, OnDestroy, OnChanges, AfterContentInit {
  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement>;

  // tslint:disable-next-line: no-forward-ref
  @ContentChildren(forwardRef(() => DtChartHeatfield)) _heatfields: QueryList<DtChartHeatfield>;

  private _series: Observable<DtChartSeries[]> | DtChartSeries[] | undefined;
  private _tooltipOpen = false;
  private _currentSeries: IndividualSeriesOptions[] | undefined;
  private _options: DtChartOptions;
  private _dataSub: Subscription | null = null;
  private _highchartsOptions: HighchartsOptions;
  private readonly _destroy$ = new Subject<void>();
  private readonly _tooltipRefreshed: Subject<DtChartTooltipEvent | null> = new Subject();

  /** Deals with the selection logic. */
  private _heatfieldSelectionModel: SelectionModel<DtChartHeatfield>;

  /** @internal stream that emits every time the plotBackground changes */
  _plotBackground$ = new BehaviorSubject<SVGRectElement | null>(null);

  /**
   * Highcharts plotBackground is used to size the selection area according to this area
   * is set after Highcharts render is completed.
   */
  private _plotBackground: SVGRectElement | null;

  /** @internal Emits when highcharts finishes rendering. */
  readonly _afterRender = new Subject<void>();

  /** @internal The highcharts chart object */
  _chartObject: ChartObject | null;

  /** Options to configure the chart. */
  @Input()
  get options(): DtChartOptions { return this._options; }
  set options(options: DtChartOptions) {
    this._options = options;
    this._changeDetectorRef.markForCheck();
  }

  /** Series of data points or a stream rendered in this chart */
  @Input()
  get series(): Observable<DtChartSeries[]> | DtChartSeries[] | undefined { return this._series; }
  set series(series: Observable<DtChartSeries[]> | DtChartSeries[] | undefined) {
    if (this._dataSub) {
      this._dataSub.unsubscribe();
      this._dataSub = null;
    }
    if (series instanceof Observable) {
      this._dataSub = series.subscribe((s: DtChartSeries[]) => {
        this._currentSeries = s;
        this._update();
      });
    } else {
      this._currentSeries = series;
    }
    this._series = series;
    this._changeDetectorRef.markForCheck();
  }

  /** The loading text of the loading distractor. */
  @Input('loading-text') loadingText: string;

  /** Eventemitter that fires everytime the chart is updated */
  @Output() readonly updated: EventEmitter<void> = new EventEmitter();
  /** Eventemitter that fires everytime the tooltip opens or closes */
  @Output() readonly tooltipOpenChange: EventEmitter<boolean> = new EventEmitter();
  /** Eventemitter that fires everytime the data inside the chart tooltip changes */
  @Output() readonly tooltipDataChange: EventEmitter<DtChartTooltipEvent | null> = new EventEmitter();

  /** returns an array of ids for the series data */
  get seriesIds(): Array<string | undefined> | undefined {
    return this._highchartsOptions.series && this._highchartsOptions.series.map((s: IndividualSeriesOptions) => s.id);
  }

  /**
   * Returns the combined highcharts options for the chart
   * combines series and options passed, merged with the defaultOptions
   */
  get highchartsOptions(): HighchartsOptions {
    // To make sure the consumer cannot modify the internal highcharts options
    // (which could result in a broken state) the object will be cloned.
    return this._highchartsOptions ? lodashMerge({}, this._highchartsOptions) : {};
  }

  /** @internal Whether the loading distractor should be shown. */
  get _isLoading(): boolean {
    return this._highchartsOptions && (!this._highchartsOptions.series || !this._highchartsOptions.series.length);
  }

  private readonly _heatfieldActiveChanges: Observable<DtChartHeatfieldActiveChange> = defer(() => {
    if (this._heatfields) {
      return merge<DtChartHeatfieldActiveChange>(...this._heatfields.map((heatfield) => heatfield.activeChange));
    }

    return this._ngZone.onStable
      .asObservable()
      .pipe(take(1), switchMap(() => this._heatfieldActiveChanges));
  });

  constructor(
    private _changeDetectorRef: ChangeDetectorRef,
    private _ngZone: NgZone,
    @Optional() private _viewportResizer: DtViewportResizer,
    @Optional() @SkipSelf() private _theme: DtTheme,
    @Optional() @SkipSelf() @Inject(DT_CHART_CONFIG) private _config: DtChartConfig
  ) {
    this._config = this._config || DT_CHART_DEFAULT_CONFIG;

    if (this._viewportResizer) {
      this._viewportResizer.change()
        .pipe(takeUntil(this._destroy$), delay(0))// delay to postpone the reflow to the next change detection cycle
        .subscribe(() => {
          if (this._chartObject) {
            this._ngZone.runOutsideAngular(() => { this._chartObject!.reflow(); });
          }
        });
    }
    if (this._theme) {
      this._theme._stateChanges.pipe(takeUntil(this._destroy$)).subscribe(() => {
        if (this._currentSeries && this._highchartsOptions) {
          this._updateColorOptions();
          this._updateChart(false);
        }
      });
    }
    this._heatfieldActiveChanges.pipe(takeUntil(this._destroy$)).subscribe((event) => {
      this._onHeatfieldActivate(event.source);
    });
    this._tooltipRefreshed.pipe(
      takeUntil(this._destroy$),
      filter(Boolean),
      map((ev) => {
        if (ev.data.points) {
          // We need to clone the series here, because highcharts mutates the object and
          // we therefore cannot create a compare function that compares the last with the next emission
          ev.data.points = ev.data.points.map((p) => ({...p, series: { ...p.series }}));
        }
        return ev;
      }),
      distinctUntilChanged((a, b) => {
        if (a && b) {
          return a.data.x === b.data.x && a.data.y === b.data.y && findHoveredSeriesIndex(a) === findHoveredSeriesIndex(b);
        }
        return false;
      })
    )
    .subscribe((ev) => { this.tooltipDataChange.next(ev); });
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes.series || changes.options) {
      this._update();
    }
  }

  ngAfterViewInit(): void {
    // Creating a new highcharts chart.
    // This needs to be done outside the ngZone so the events, highcharts listens to, do not pollute our change detection.
    this._chartObject = this._ngZone.runOutsideAngular(() => chart(this.container.nativeElement, this.highchartsOptions));

    addHighchartsEvent(this._chartObject, 'redraw', () => { this._notifyAfterRender(); });
    this._notifyAfterRender();

    // adds event-listener to highcharts custom event for tooltip closed
    addHighchartsEvent(this._chartObject, 'tooltipClosed', () => {
      this._tooltipOpen = false;
      this.tooltipOpenChange.next(false);
      this._tooltipRefreshed.next(null);
    });
    // Adds event-listener to highcharts custom event for tooltip refreshed closed */
    // We cannot type the event param, because the types for highcharts are incorrect
    // tslint:disable-next-line:no-any
    addHighchartsEvent(this._chartObject, 'tooltipRefreshed', (event: any) => {
      if (!this._tooltipOpen) {
        this._tooltipOpen = true;
        this.tooltipOpenChange.next(true);
      }
      this._tooltipRefreshed.next({ data: (event as DtHcTooltipEventPayload).data , chart: this._chartObject! });
    });
  }

  ngAfterContentInit(): void {
    this._heatfieldSelectionModel = new SelectionModel<DtChartHeatfield>();
    this._heatfieldSelectionModel.changed.pipe(takeUntil(this._destroy$)).subscribe((event) => {
      event.added.forEach((heatfield) => { heatfield.active = true; });
      event.removed.forEach((heatfield) => { heatfield.active = false; });
    });
  }

  ngOnDestroy(): void {
    this._destroy$.next();
    this._destroy$.complete();
    if (this._chartObject) {
      this._chartObject.destroy();
      // Cleanup reference here so we don't trigger more things afterwards
      this._chartObject = null;
    }
    if (this._dataSub) {
      this._dataSub.unsubscribe();
    }
    this._afterRender.complete();
  }

  /** @internal Creates new highcharts options and applies it to the chart. */
  _update(): void {
    const highchartsOptions = createHighchartOptions(this._options, this._currentSeries);

    // Check if x Axis type has changes (e.g. numeric -> category)
    const xAxisHasChanged = (highchartsOptions.xAxis !== this.highchartsOptions.xAxis);

    this._highchartsOptions = highchartsOptions;
    this._updateColorOptions();
    this._updateChart(xAxisHasChanged);
    this._changeDetectorRef.markForCheck();
  }

  /** @internal toggles the tooltip and updates the chart with the new settings */
  _toggleTooltip(enabled: boolean): void {
    if (this._highchartsOptions.tooltip!.enabled !== enabled) {
      this._highchartsOptions.tooltip!.enabled = enabled;
      this._updateChart(false);
    }
  }

  private _notifyAfterRender(): void {
    this._afterRender.next();
    this._plotBackground$.next(this._plotBackground);
  }

  /** Invoked when an heatfield is activated. */
  private _onHeatfieldActivate(heatfield: DtChartHeatfield): void {
    const wasActive = this._heatfieldSelectionModel.isSelected(heatfield);

    if (heatfield.active) {
      this._heatfieldSelectionModel.select(heatfield);
    } else {
      this._heatfieldSelectionModel.deselect(heatfield);
    }

    if (wasActive !== this._heatfieldSelectionModel.isSelected(heatfield)) {
      this._changeDetectorRef.markForCheck();
    }
  }

  /** Updates the chart with current options and series. */
  private _updateChart(xAxisHasChanged: boolean): void {
    if (this._chartObject) {
      this._ngZone.runOutsideAngular(() => {
        if (xAxisHasChanged) {
          this._chartObject!.update({ series: [] }, false, true);
        }
        this._chartObject!.update({ ...this._highchartsOptions }, true, true);
      });
      this.updated.emit();
    }
  }

  private _updateColorOptions(): void {
    if (this._config.shouldUpdateColors) {
      this._highchartsOptions = applyHighchartsColorOptions(this._highchartsOptions, this._theme);
    }
  }













  /********************************************************************
   * S E L E C T I O N   A R E A
   ********************************************************************/

  selectionAreaDisabled = false;

  _disableRange = false;
  _disableTimestamp = false;

  /** @internal mousedown event stream on the selection area emits only left mouse */
  _mousedown$: Observable<MouseEvent> = EMPTY;
  /** @internal mousemove event stream from window */
  _mousemove$: Observable<MouseEvent> = EMPTY;
  /** @internal mouse up stream on the window */
  _mouseup$: Observable<MouseEvent> = EMPTY;
  /** @internal drag event based on a left click on the selection area */
  _drag$: Observable<MouseEvent> = EMPTY;
  /** @internal drag event triggered by a boundary drag-resize *(only available within a range)* */
  _dragHandle$: Observable<MouseEvent> = EMPTY;
  /** @internal click event stream that emits only click events on the selection area */
  _click$: Observable<MouseEvent> = EMPTY;
  /** @internal stream that emits the current relative mouse position on the selection area */
  _currentMousePosition$: Observable<MousePosition> = EMPTY;

  @ContentChild(DtChartRange)  private _range: DtChartRange | undefined;
  @ContentChild(DtChartTimestamp)  private _timestamp: DtChartTimestamp | undefined;
  @ViewChild('selectionArea') private _selectionArea: ElementRef<HTMLDivElement>;

  private _initializeSelectionArea(): void {

    if (!this._plotBackground) {
      throw Error('Highcharts has not rendered yet! You Requested some highcharts internal element!');
    }

    const yAxisGrids = [].slice.call(this.container.nativeElement.querySelectorAll(HIGHCHARTS_Y_AXIS_GRID));
    const xAxisGrids = [].slice.call(this.container.nativeElement.querySelectorAll(HIGHCHARTS_X_AXIS_GRID));
    const seriesGroup = this.container.nativeElement.querySelector(HIGHCHARTS_SERIES_GROUP);

    const mousedownElements = [
      this._plotBackground,
      seriesGroup,
      ...xAxisGrids,
      ...yAxisGrids,
    ];

    this._mousedown$ = captureAndMergeEvents('mousedown', mousedownElements).pipe(
      tap(() => {
        removeCssClass(this._selectionArea.nativeElement, NO_POINTER_EVENTS_CLASS);
      }),
      filter((event) => event.button === 0), // only emit left mouse
      filter(() => !this.selectionAreaDisabled),
      share()
    );

    this._mousemove$ = fromEvent<MouseEvent>(window, 'mousemove').pipe(
      filter(() => !this.selectionAreaDisabled),
      share()
    );

    this._mouseup$ = fromEvent<MouseEvent>(window, 'mouseup').pipe(
      filter(() => !this.selectionAreaDisabled),
      tap(() => {
        addCssClass(this._selectionArea.nativeElement, NO_POINTER_EVENTS_CLASS);
      }),
      share()
    );

    this._drag$ = this._mousedown$.pipe(
      filter(() => !this._disableRange),
      switchMap(() => this._mousemove$.pipe(takeUntil(this._mouseup$))),
      share()
    );

    this._click$ = merge(
      this._mousedown$,
      this._mousemove$,
      this._mouseup$
    ).pipe(
      pairwise(),
      filter(([a, b]) => a.type === 'mousedown' && b.type === 'mouseup'),
      map(([a, b]) => b),
      share()
    );

    this._currentMousePosition$ = this._mousedown$.pipe(
      map((event: MouseEvent) => getRelativeMousePosition(event, this._selectionArea.nativeElement))
    );

    const showTimestamp$ = this._click$.pipe(mapTo(true));
    const showRange$ = this._drag$.pipe(mapTo(true));
    const hideTimestampAndRange$ = this._mousedown$.pipe(mapTo(false));

    merge(showRange$, hideTimestampAndRange$).pipe(
      distinctUntilChanged(),
      takeUntil(this._destroy$)
    ).subscribe((showOrHide) => {
      this._showRange(showOrHide);
    });

    merge(showTimestamp$, hideTimestampAndRange$).pipe(
      distinctUntilChanged(),
      takeUntil(this._destroy$)
    ).subscribe((showOrHide) => {
      this._showTimestamp(showOrHide);
    });

    if (this._timestamp) {
      this._click$.pipe(
        map((event: MouseEvent) => getRelativeMousePosition(event, this._selectionArea.nativeElement)),
        takeUntil(this._destroy$)
      ).subscribe(({x, y}) => {
        this._timestamp!._setPosition(x);
      });
    }

    if (this._range) {
      // create a stream for drag handle event
      this._dragHandle$ = from(this._range._handleDragStarted).pipe(
        tap(() => { removeCssClass(this._selectionArea.nativeElement, NO_POINTER_EVENTS_CLASS); }),
        switchMap(() => this._mousemove$.pipe(takeUntil(this._mouseup$))),
        share()
      );

      this._checkRangeResized();
      this._checkForRangeUpdates();
    }
  }

  ngOnInit(): void {
    // after Highcharts is rendered we can start initializing the selection area.
    this._afterRender.pipe(
      takeUntil(this._destroy$)
    ).subscribe(() => {
      this._plotBackground = this.container.nativeElement.querySelector(HIGHCHARTS_PLOT_BACKGROUND);
      this._setPosition();

      this._initializeSelectionArea();
    });
  }

  private _checkForRangeUpdates(): void {
    if (!this._range) { return; }
    // stream that stores the last positions
    const lastPositions$ = new ReplaySubject<Range>();
    const leftOrRightHandle$ = from(this._range._handleDragStarted).pipe(
      map((event: MouseEvent) => identifyLeftOrRightHandle(event)),
      filter(Boolean),
      distinctUntilChanged()
    );

    // update a selection area according to a resize through the side handles
    const updatedRange$ = combineLatest(lastPositions$, this._dragHandle$, leftOrRightHandle$).pipe(
      updateRange(this._selectionArea.nativeElement),
      share()
    );

    // Listen for an initial creation of a selection area with a normal drag
    combineLatest(this._drag$, this._currentMousePosition$).pipe(
      createRange(this._selectionArea.nativeElement),
      throttleTime(0, animationFrameScheduler),
      takeUntil(this._destroy$)
    ).subscribe((range: Range) => {
      if (this._range) {
        this._range._updateRange(range);
        lastPositions$.next(range);
      }
    });

    // subscribe to changes to a created selection area
    updatedRange$.pipe(
      throttleTime(0, animationFrameScheduler),
      takeUntil(this._destroy$)
    ).subscribe((range) => {
      if (this._range) {
        this._range._updateRange(range);
      }
    });

    // when the range gets updated by a drag on the handles we only set the last position
    // when the drag is completed with a mouseup.
    this._mouseup$.pipe(
      withLatestFrom(updatedRange$),
      map((data) => data[1]),
      takeUntil(this._destroy$)
    ).subscribe((range) => {
      lastPositions$.next(range);
    });

    this._mouseup$.pipe(takeUntil(this._destroy$)).subscribe(() => {
      if (this._range) {
        this._range._addOrRemoveReleasedClass(true);
      }
    });
  }

  private _showRange(show: boolean): void {
    if (this._range) {
      this._range.hidden = !show;
    }
  }

  private _showTimestamp(show: boolean): void {
    if (this._timestamp) {
      this._timestamp.hidden = !show;
    }
  }

  /**
   * This method watches with a provides start observable if the range is going to be resized.
   * If the range gets resized then we apply a class that changes the cursor.
   */
  private _checkRangeResized(): void {
    const dragHandleStart$ = this._dragHandle$.pipe(mapTo(true));
    const initialDragStart$ = this._drag$.pipe(mapTo(true));
    // merge the streams of the initial drag start and the handle drag start
    const startResizing$ = merge(initialDragStart$, dragHandleStart$);
    // map to false to end the resize
    const mouseRelease$ = this._mouseup$.pipe(mapTo(false));

    // stream that emits drag start end end
    merge(startResizing$, mouseRelease$).pipe(
      distinctUntilChanged(),
      takeUntil(this._destroy$)
    ).subscribe((resize: boolean) => {
      if (resize) {
        addCssClass(this._selectionArea.nativeElement, GRAB_CURSOR_CLASS);
      } else {
        removeCssClass(this._selectionArea.nativeElement, GRAB_CURSOR_CLASS);
      }
    });
  }

  /** Set the position of the select-able area to the size of the highcharts plot background */
  private _setPosition(): void {
    if (!this._plotBackground) {
      // TODO: move error message to a global place
      throw Error('Highcharts has not rendered yet! You Requested some highcharts internal element!');
    }

    // get Bounding client Rects of the plot background and the host to calculateRelativeXPos
    // a relative offset.
    const hostBCR = this._selectionArea.nativeElement.getBoundingClientRect();
    const plotBCR = this._plotBackground.getBoundingClientRect();

    const topOffset = plotBCR.top - hostBCR.top;
    const leftOffset = plotBCR.left - hostBCR.left;

    setPosition(this._selectionArea.nativeElement, {
      top: topOffset,
      left: leftOffset,
      width: plotBCR.width,
      height: plotBCR.height,
    });
  }
}

/** Check if an event target is the left or right handle  */
function identifyLeftOrRightHandle(event: MouseEvent): 'left' | 'right' | null {
  const target = event.target;

  if (!!target && target instanceof Element) {
    if (target.className.includes('dt-chart-right-handle')) {
      return 'right';
    }
    if (target.className.includes('dt-chart-left-handle')) {
      return 'left';
    }
  }
  return null;
}
